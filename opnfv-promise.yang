module opnfv-promise {
  namespace "urn:opnfv:promise";
  prefix promise;

  import complex-types { prefix ct; }
  import ietf-yang-types { prefix yang; }
  import nfv-infrastructure { prefix nfvi; }
  import nfv-mano { prefix mano; }

  description
    "OPNFV Promise Resource Reservation/Allocation controller module";
  
  revision 2015-08-06 {
    description "Updated to incorporate YangForge framework";
  }

  revision 2015-04-16 {
    description "Initial revision.";
  }

  grouping resource-capacity {
    container capacity {
      container quota { description 'Conceptual container that should be extended'; }
      container usage { description 'Conceptual container that should be extended'; config false; }
      container reserved { description 'Conceptual container that should be extended'; config false; }
      container available { description 'Conceptual container that should be extended'; config false; }
    }
  }

  grouping compute-capacity {
    leaf cores { type number; }
    leaf ram { type number; }
    leaf instances { type number; }
  }

  grouping networking-capacity {
    leaf network { type number; }
    leaf port { type number; }
    leaf router { type number; }
    leaf subnet { type number; }
    leaf address { type number; }
  }

  ct:complex-type ResourceReservation {
    ct:extends nfvi:ResourceElement;
    
    description
      "Contains the capacities of various resource services being reserved
       along with any resource elements needed to be available at
       the time of allocation(s).";
    
    reference "OPNFV-PROMISE, Section 3.4.1";
    
    leaf start { type yang:date-and-time; }
    leaf end   { type yang:date-and-time; }
    leaf expiry {
      description "Duration in seconds from start when unallocated reserved resources will be released back into the pool";
      type number; units "seconds";
    }
    leaf zone {
      description "Optional identifier";
      type instance-identifier { ct:instance-type nfvi:AvailabilityZone; } }
    container capacity {
      uses compute-capacity;
      uses networking-capcity;
      uses storage-capacity;
    }
    leaf-list resources {
      description
        "Reference to a collection of existing resource elements required by
         this reservation. It can contain any instance derived from
         ResourceElement, such as ServerInstances or even other
         ResourceReservations. If the ResourceReservation request is
         accepted, the ResourceElement(s) listed here will be placed
         into 'protected' mode as to prevent accidental delete.";
      type instance-identifier {
        ct:instance-type nfvi:ResourceElement;
      }
      // following 'must' statement applies to each element
      must "boolean(/provider/elements/*[@id=id])" {
        error-message "One or more of the ResourceElement(s) does not exist in the provider to be reserved";
      }
    }
    container remaining {
      config false;
      description
        "Provides visibility into total remaining capacity for this
         reservation based on allocations that took effect utilizing
         this reservation ID as a reference.";

      uses compute-capacity;
      uses networking-capcity;
      uses storage-capacity;
    }
    leaf-list allocations {
      config false;
      description
        "Reference to a collection of consumed allocations referencing
         this reservation.";
      type instance-identifier {
        ct:instance-type ResourceAllocation;
      }
    }
  }

  ct:complex-type ResourceAllocation {
    ct:extends nfvi:ResourceElement;

    description
       "Contains a list of resources to be allocated with optional reference
       to an existing reservation.
       
       If reservation is specified but this request is received prior
       to reservation start timestamp, then it will be rejected unless
       'allocate-on-start' is set to true.  'allocate-on-start' allows
       the allocation to be auto-initiated and scheduled to run in the
       future.
       
       The 'priority' state indicates the classification for dealing
       with resource starvation scenarios. Lower priority allocations
       will be forcefully terminated to allow for higher priority
       allocations to be fulfilled.

       Allocations without reference to an existing reservation will
       receive the lowest priority.";
    
    reference "OPNFV-PROMISE, Section 3.4.3";

    leaf reservation {
      description "Reference to an existing reservation identifier";
      
      type instance-identifier {
        ct:instance-type ResourceReservation;
        require-instance true;
      }
    }

    leaf allocate-on-start {
      description
       "If 'allocate-on-start' is set to true, the 'planned' allocations will
       take effect automatically at the reservation 'start' date/time.";
      type boolean; default false;
    }
    
    ct:instance-list resources {
      description "Contains list of new ResourceElements that will be allocated";
      ct:instance-type nfvi:ResourceElement;
    }

    leaf priority {
      description
        "Reflects current priority level of the allocation according to classification rules";
      type number;
      config false;
    }
  }
  
  // MAIN CONTAINER
  container promise {
    leaf-list providers {
      description "Aggregate collection of all registered ResourceProvider instances for Promise resource management service";
      type instance-identifier {
        ct:instance-type mano:VirtualInfrastructureManager;
      }
    }

    ct:instance-list reservations {
      description "Aggregate collection of all active ResourceReservation instances";
      ct:instance-type ResourceReservation;
    }

    ct:instance-list allocations {
      description "Aggregate collection of all active ResourceAllocation instances";
      ct:instance-type ResourceAllocation;
    }
  }

  rpc create-reservation {
    input {
      leaf provider {
        type instance-identifier { ct:instance-type nfvi:ResourceProvider; }
        mandatory true;
      }
      ct:instance request { ct:instance-type ResourceReservation; }
    }
    output {
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
      }
    }
  }

  
  
    leaf provider {
      description
        "Reference to a specified existing provider from which this reservation
         will be drawn if used in the context of multi-provider
         environment.";
      type instance-identifier {
        ct:instance-type nfvi:ResourceProvider;
        require-instance true;
      }
    }


  rpc register-resource-pool {
    description "This operation allows you to register a ResourcePool into Promise resource management service";
    input {
      leaf provider {
        type instance-identifier { ct:instance-type nfvi:ResourceProvider; }
        mandatory true;
      }
    }
    output {
      leaf register-result {
        type enumeration {
          enum success;
          enum error;
        }
      }
    }
  }
  rpc unregister-provider {
    description "This operation allows you to unregister a ResourceProvider from Promise resource management service";
    
  }
  
  rpc query-capacity {
    input {
      leaf-list providers { type instance-identifier { ct:instance-type nfvi:ResourceProvider; } }
      // additional parameters for query
    }
    output {
      ct:instance-list providers {
        ct:instance-type nfvi:ResourceProvider;
        // augment compute container with capacity elements
        augment "compute" {
          uses resource-capacity {
            augment "capacity/quota" { uses compute-capacity; }
            augment "capacity/usage" { uses compute-capacity; }
            augment "capacity/reserved" { uses compute-capacity; }
            augment "capacity/available" { uses compute-capacity; }
          }
        }

        // augment networking container with capacity elements
        augment "networking" {
          uses resource-capacity {
            if-feature has-networking-capacity;
            augment "capacity/quota" { uses networking-capacity; }
            augment "capacity/usage" { uses networking-capacity; }
            augment "capacity/reserved" { uses networking-capacity; }
            augment "capacity/available" { uses networking-capacity; }
          }
        }
      }
    }
  }
  
  // BULK operations
  rpc list-reservations;
  rpc update-reservations;
  rpc cancel-reservations;

  rpc list-allocations;
  rpc create-allocation;

  notification reservation-event;
  notification capacity-event;
  notification allocation-event;
}
