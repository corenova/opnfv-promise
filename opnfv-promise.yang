module opnfv-promise {
  namespace "urn:opnfv:promise";
  prefix promise;

  import complex-types { prefix ct; }
  import ietf-yang-types { prefix yang; }
  import nfv-infrastructure { prefix nfvi; }
  import nfv-mano { prefix mano; }

  description
    "OPNFV Promise Resource Reservation/Allocation controller module";

  revision 2015-10-05 {
    description "Complete coverage of reservation related intents";
  }
  
  revision 2015-08-06 {
    description "Updated to incorporate YangForge framework";
  }

  revision 2015-04-16 {
    description "Initial revision.";
  }

  feature reservation-service {
    description "When enabled, provides resource reservation service";
  }

  feature multi-provider {
    description "When enabled, provides resource reservation across many providers";
  }
  
  grouping resource-capacity {
    container capacity {
      container total     { description 'Conceptual container that should be extended'; }
      container usage     { description 'Conceptual container that should be extended'; config false; }
      container reserved  { description 'Conceptual container that should be extended'; config false; }
      container available { description 'Conceptual container that should be extended'; config false; }
    }
  }

  grouping compute-capacity {
    leaf cores     { type int16; default 0; }
    leaf ram       { type int32; default 0; units 'MB'; }
    leaf instances { type int16; default 0; }
  }

  grouping network-capacity {
    leaf networks  { type int16; default 0; }
    leaf ports     { type int16; default 0; }
    leaf routers   { type int16; default 0; }
    leaf subnets   { type int16; default 0; }
    leaf addresses { type int32; default 0; }
  }

  grouping storage-capacity {
    leaf gigabytes { type int32; default 0; units 'GB'; }
    leaf snapshots { type int16; default 0; }
    leaf volumes   { type int16; default 0; }
  }

  grouping resource-usage-request {
    description
      "Information model capturing available parameters to make a resource
       usage request.";
    reference "OPNFV-PROMISE, Section 3.4.1";
    
    leaf start { type yang:date-and-time; }
    leaf end   { type yang:date-and-time; }
    leaf zone {
      description "Optional identifier to an Availability Zone";
      type instance-identifier { ct:instance-type nfvi:AvailabilityZone; }
    }
    container capacity {
      uses compute-capacity;
      uses network-capacity;
      uses storage-capacity;
    }
    leaf-list resources {
      description
        "Reference to a collection of 'pre-existing' resource elements required
         by this request. It can contain any instance derived from
         ResourceElement, such as ServerInstances or even other
         ResourceReservations. If the ResourceReservation request is
         accepted, the ResourceElement(s) listed here will be placed
         into 'protected' mode as to prevent accidental removal.

         If any of these reserved resources become 'unavailable' due
         to environmental or administrative activity, a notification
         will be issued informing of the issue.";
      
      type instance-identifier {
        ct:instance-type nfvi:ResourceElement;
      }
    }
  }

  grouping allocation-request {
    description
      "Information model capturing available parameters to make a resource
       allocation request.";
    reference "OPNFV-PROMISE, Section 3.4.1";

    leaf reservation {
      description "Reference to an existing reservation identifier";
      
      type instance-identifier {
        ct:instance-type ResourceReservation;
        require-instance true;
      }
    }

    leaf allocate-on-start {
      description
        "If 'allocate-on-start' is set to true, the 'planned' allocations will
       take effect automatically at the reservation 'start' date/time.";
      type boolean; default false;
    }

    ct:instance-list resources {
      description "Contains list of new ResourceElements that will be allocated";
      ct:instance-type nfvi:ResourceElement;
    }
  }

  grouping query-start-end-window {
    container window {
      description "Matches entries that are within the specified start/end time window";
      leaf start { type yang:date-and-time; }
      leaf end   { type yang:date-and-time; }
      leaf scope {
        type enumeration {
          enum "exclusive" {
            description "Matches entries that start AND end within the window";
          }
          enum "inclusive" {
            description "Matches entries that start OR end within the window";
          }
        }
        default "inclusive";
      }
    }
  }

  grouping query-resource-collection {
    uses query-start-end-window {
      description "Match for ResourceCollection(s) that are within the specified start/end time window";
    }
    leaf show-utilization { type boolean; default true; }
    container resources {
      leaf-list some {
        description "Query for ResourceCollection(s) that contain some or more of these element(s)";
        type instance-identifier { ct:instance-type nfvi:ResourceElement; }
      }
      leaf-list every {
        description "Query for ResourceCollection(s) that contain all of these element(s)";
        type instance-identifier { ct:instance-type nfvi:ResourceElement; }
      }
    }
  }
  
  grouping utilization-output {
    list utilization {
      key 'timestamp';
      leaf timestamp { type yang:date-and-time; }
      leaf count { type int16; }
      container capacity {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
    }
  }

  ct:complex-type ResourceCollection {
    ct:extends nfvi:ResourceElement;
    ct:abstract true;

    description
      "Describes an abstract ResourceCollection data model, which represents
       a grouping of capacity and elements available during a given
       window in time which must be extended by other resource
       collection related models";

    uses resource-usage-request {
      refine resources {
        // following 'must' statement applies to each element
        // NOTE: just a non-working example for now...
        must "boolean(/provider/elements/*[@id=id])" {
          error-message "One or more of the ResourceElement(s) does not exist in the provider to be reserved";
        }
      }
    }

    leaf active {
      config false;
      description
        "Provides current state of this record whether it is enabled and within
         specified start/end time";
      type boolean;
    }

    leaf provider {
      if-feature multi-provider;
      type instance-identifier {
        ct:instance-type mano:VirtualInfrastructureManager;
        require-instance true;
      }
    }
  }

  ct:complex-type ResourcePool {
    ct:extends ResourceCollection;

    description
      "Describes an instance of an active ResourcePool record, which
       represents total available capacity and elements about a
       specific provider.";
  }

  ct:complex-type ResourceReservation {
    ct:extends ResourceCollection;
    
    description
      "Describes an instance of an active ResourceReservation record, created
       usually as a result of 'create-reservation' request. 

       A ResourceReservation is a derived instance of a generic
       ResourceCollection which has additional parameters to track
       allocations.

       Contains the capacities of various resource services being
       reserved along with any resource elements needed to be
       available at the time of allocation(s).";
    
    reference "OPNFV-PROMISE, Section 3.4.1";

    leaf created-on  { type yang:date-and-time; config false; }
    leaf modified-on { type yang:date-and-time; config false; }
    
    container remaining {
      config false;
      description
        "Provides visibility into total remaining capacity for this
         reservation based on allocations that took effect utilizing
         this reservation ID as a reference.";

      uses compute-capacity;
      uses network-capcity;
      uses storage-capacity;
    }
    
    leaf-list allocations {
      config false;
      description
        "Reference to a collection of consumed allocations referencing
         this reservation.";
      type instance-identifier {
        ct:instance-type ResourceAllocation;
      }
    }
  }

  ct:complex-type ResourceAllocation {
    ct:extends ResourceCollection;

    description
      "Contains a list of resources to be allocated with optional reference
       to an existing reservation.
       
       If reservation is specified but this request is received prior
       to reservation start timestamp, then it will be rejected unless
       'allocate-on-start' is set to true.  'allocate-on-start' allows
       the allocation to be auto-initiated and scheduled to run in the
       future.
       
       The 'priority' state indicates the classification for dealing
       with resource starvation scenarios. Lower priority allocations
       will be forcefully terminated to allow for higher priority
       allocations to be fulfilled.

       Allocations without reference to an existing reservation will
       receive the lowest priority.";
    
    reference "OPNFV-PROMISE, Section 3.4.3";

    uses allocation-request;

    leaf priority {
      description
        "Reflects current priority level of the allocation according to classification rules";
      type uint8;
      config false;
    }
  }
  
  // MAIN CONTAINER
  container promise {
    
    uses resource-capacity {
      description "Describes current state info about capacity utilization info";
      
      augment "capacity/total" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/usage" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/reserved" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/available" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
    }

    leaf-list providers {
      if-feature multi-provider;
      
      description "Aggregate collection of all registered ResourceProvider instances for Promise resource management service";
      type instance-identifier {
        ct:instance-type mano:VirtualInfrastructureManager;
      }
    }

    ct:instance-list pools {
      if-feature reservation-service;
      description "Aggregate collection of all ResourcePool instances";
      ct:instance-type ResourcePool;
    }
    
    ct:instance-list reservations {
      if-feature reservation-service;
      description "Aggregate collection of all ResourceReservation instances";
      ct:instance-type ResourceReservation;
    }

    ct:instance-list allocations {
      description "Aggregate collection of all ResourceAllocation instances";
      ct:instance-type ResourceAllocation;
    }

    container policy {
      container reservation {
        leaf max-future-start-range {
          description
            "Enforce reservation request 'start' time is within allowed range from now";
          type uint16 { range 0..365; }
          units "days";
        }
        leaf max-future-end-range {
          description
            "Enforce reservation request 'end' time is within allowed range from now";
          type uint16 { range 0..365; }
          units "days";
        }
        leaf max-duration {
          description
            "Enforce reservation duration (end-start) does not exceed specified threshold";
          type uint16;
          units "hours";
          default 8760; // for now cap it at max one year as default
        }
        leaf expiry {
          description
            "Duration in minutes from start when unallocated reserved resources
             will be released back into the pool";
          type uint32;
          units "minutes";
        }
      }
    }
  }

  //-------------------
  // INTENT INTERFACE
  //-------------------

  // RESERVATION INTENTS
  rpc create-reservation {
    if-feature reservation-service;
    description "Make a request to the reservation system to reserve resources";
    input {
      uses resource-usage-request;
      leaf provider {
        if-feature multi-provider;
        description
          "Reference to a specified existing provider from which this reservation
           will be drawn if used in the context of multi-provider environment.";
        type instance-identifier {
          ct:instance-type mano:VirtualInfrastructureManager;
          require-instance true;
        }
        mandatory true;
      }
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
      }
    }
  }
  
  rpc query-reservation {
    if-feature reservation-service;
    description "Query the reservation system to return matching reservation(s)";
    input {
      leaf zone { type instance-identifier { ct:instance-type nfvi:AvailabilityZone; } }
      uses query-resource-collection;
    }
    output {
      leaf-list reservations { type instance-identifier { ct:instance-type ResourceReservation; } }
      uses utilization-output;
    }
  }
  
  rpc update-reservation {
    description "Update reservation details for an existing reservation";
    input {
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
        mandatory true;
      }
      uses resource-usage-request;
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
    }
  }
  
  rpc cancel-reservation {
    description "Cancel the reservation and be a good steward";
    input {
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
        mandatory true;
      }
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
    }
  }

  // CAPACITY INTENTS
  rpc query-capacity {
    description "Check available capacity information about a specified resource collection";
    input {
      leaf capacity {
        type enumeration {
          enum 'total';
          enum 'reserved';
          enum 'usage';
          enum 'available';
        }
        default 'total';
      }
      leaf zone { type instance-identifier { ct:instance-type nfvi:AvailabilityZone; } }
      uses query-resource-collection;
      // TBD: additional parameters for query-capacity
    }
    output {
      leaf-list collections { type instance-identifier { ct:instance-type ResourceCollection; } }
      uses utilization-output;
    }
  }

  // TODO...
  notification reservation-event;
  notification capacity-event;
  notification allocation-event;
}
