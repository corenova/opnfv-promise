module opnfv-promise {
  namespace "urn:opnfv:promise";
  prefix promise;

  import complex-types { prefix ct; }
  import ietf-yang-types { prefix yang; }
  import nfv-infrastructure { prefix nfvi; }
  import nfv-mano { prefix mano; }

  description
    "OPNFV Promise Resource Reservation/Allocation controller module";
  
  revision 2015-08-06 {
    description "Updated to incorporate YangForge framework";
  }

  revision 2015-04-16 {
    description "Initial revision.";
  }

  feature reservation-service {
    description "When enabled, provides resource reservation service";
  }
  
  grouping resource-capacity {
    container capacity {
      container quota     { description 'Conceptual container that should be extended'; }
      container usage     { description 'Conceptual container that should be extended'; config false; }
      container reserved  { description 'Conceptual container that should be extended'; config false; }
      container available { description 'Conceptual container that should be extended'; config false; }
    }
  }

  grouping compute-capacity {
    leaf cores     { type uint16; }
    leaf ram       { type uint32; units 'MB'; }
    leaf instances { type uint16; }
  }

  grouping network-capacity {
    leaf network { type uint16; }
    leaf port    { type uint16; }
    leaf router  { type uint16; }
    leaf subnet  { type uint16; }
    leaf address { type uint32; }
  }

  grouping storage-capacity {
    leaf gigabytes { type uint32; units 'GB'; }
    leaf snapshots { type uint16; }
    leaf volumes   { type uint16; }
  }

  grouping reservation-request {
    description
      "Information model capturing available parameters to make a resource
       reservation request.";
    reference "OPNFV-PROMISE, Section 3.4.1";
    
    leaf start { type yang:date-and-time; }
    leaf end   { type yang:date-and-time; }
    leaf expiry {
      description "Duration in seconds from start when unallocated reserved resources will be released back into the pool";
      type uint32; units "seconds";
    }
    leaf zone {
      description "Optional identifier to an Availability Zone";
      type instance-identifier { ct:instance-type nfvi:AvailabilityZone; }
    }
    container capacity {
      uses compute-capacity;
      uses network-capacity;
      uses storage-capacity;
    }
    leaf-list resources {
      description
        "Reference to a collection of 'pre-existing' resource elements required
         by this reservation. It can contain any instance derived from
         ResourceElement, such as ServerInstances or even other
         ResourceReservations. If the ResourceReservation request is
         accepted, the ResourceElement(s) listed here will be placed
         into 'protected' mode as to prevent accidental removal.

         If any of these reserved resources become 'unavailable' due
         to environmental or administrative activity, a notification
         will be issued informing of the issue.";
      
      type instance-identifier {
        ct:instance-type nfvi:ResourceElement;
      }
    }
  }

  grouping allocation-request {
    description
      "Information model capturing available parameters to make a resource
       allocation request.";
    reference "OPNFV-PROMISE, Section 3.4.1";

    leaf reservation {
      description "Reference to an existing reservation identifier";
      
      type instance-identifier {
        ct:instance-type ResourceReservation;
        require-instance true;
      }
    }

    leaf allocate-on-start {
      description
        "If 'allocate-on-start' is set to true, the 'planned' allocations will
       take effect automatically at the reservation 'start' date/time.";
      type boolean; default false;
    }

    ct:instance-list resources {
      description "Contains list of new ResourceElements that will be allocated";
      ct:instance-type nfvi:ResourceElement;
    }
  }
  
  ct:complex-type ResourceReservation {
    ct:extends nfvi:ResourceElement;
    
    description
      "Describes an instance of an active ResourceReservation record, created
       usually as a result of 'create-reservation' request. 

       Contains the capacities of various resource services being
       reserved along with any resource elements needed to be
       available at the time of allocation(s).";
    
    reference "OPNFV-PROMISE, Section 3.4.1";

    uses reservation-request {
      refine resources {
        // following 'must' statement applies to each element
        // NOTE: just a non-working example for now...
        must "boolean(/provider/elements/*[@id=id])" {
          error-message "One or more of the ResourceElement(s) does not exist in the provider to be reserved";
        }
      }
    }

    leaf created-on  { type yang:date-and-time; }
    leaf modified-on { type yang:date-and-time; }
    
    leaf provider {
      if-feature multi-provider;
      type instance-identifier {
        ct:instance-type mano:VirtualInfrastructureManager;
        require-instance true;
      }
    }
    
    container remaining {
      config false;
      description
        "Provides visibility into total remaining capacity for this
         reservation based on allocations that took effect utilizing
         this reservation ID as a reference.";

      uses compute-capacity;
      uses network-capcity;
      uses storage-capacity;
    }
    
    leaf-list allocations {
      config false;
      description
        "Reference to a collection of consumed allocations referencing
         this reservation.";
      type instance-identifier {
        ct:instance-type ResourceAllocation;
      }
    }
  }

  ct:complex-type ResourceAllocation {
    ct:extends nfvi:ResourceElement;

    description
      "Contains a list of resources to be allocated with optional reference
       to an existing reservation.
       
       If reservation is specified but this request is received prior
       to reservation start timestamp, then it will be rejected unless
       'allocate-on-start' is set to true.  'allocate-on-start' allows
       the allocation to be auto-initiated and scheduled to run in the
       future.
       
       The 'priority' state indicates the classification for dealing
       with resource starvation scenarios. Lower priority allocations
       will be forcefully terminated to allow for higher priority
       allocations to be fulfilled.

       Allocations without reference to an existing reservation will
       receive the lowest priority.";
    
    reference "OPNFV-PROMISE, Section 3.4.3";

    uses allocation-request;

    leaf priority {
      description
        "Reflects current priority level of the allocation according to classification rules";
      type uint8;
      config false;
    }
  }
  
  // MAIN CONTAINER
  container promise {
    leaf-list providers {
      if-feature multi-provider;
      
      description "Aggregate collection of all registered ResourceProvider instances for Promise resource management service";
      type instance-identifier {
        ct:instance-type mano:VirtualInfrastructureManager;
      }
    }

    uses resource-capacity {
      augment "capacity/quota" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/usage" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/reserved" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
      augment "capacity/available" {
        uses compute-capacity;
        uses network-capacity;
        uses storage-capacity;
      }
    }

    ct:instance-list reservations {
      if-feature reservation-service;
      description "Aggregate collection of all active ResourceReservation instances";
      ct:instance-type ResourceReservation;
    }

    ct:instance-list allocations {
      description "Aggregate collection of all active ResourceAllocation instances";
      ct:instance-type ResourceAllocation;
    }
  }

  //-------------------
  // INTENT INTERFACE
  //-------------------

  // RESERVATION INTENTS
  rpc create-reservation {
    if-feature reservation-service;
    description "Make a request to the reservation system to reserve resources";
    input {
      uses reservation-request;
      leaf provider {
        if-feature multi-provider;
        description
          "Reference to a specified existing provider from which this reservation
           will be drawn if used in the context of multi-provider environment.";
        type instance-identifier {
          ct:instance-type mano:VirtualInfrastructureManager;
          require-instance true;
        }
        mandatory true;
      }
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
      }
    }
  }
  
  rpc query-reservation {
    if-feature reservation-service;
    description "Query the reservation system to return matching reservation(s)";
    input {
      leaf zone { type instance-identifier { ct:instance-type nfvi:AvailabilityZone; } }
      container start {
        leaf after  { type yang:date-and-time; }
        leaf before { type yang:date-and-time; }
      }
      container end {
        leaf after  { type yang:date-and-time; }
        leaf before { type yang:date-and-time; }
      }
      container capacity {
        container less-than {
          uses compute-capacity;
          uses network-capacity;
          uses storage-capacity;
        }
        container greater-than {
          uses compute-capacity;
          uses network-capacity;
          uses storage-capacity;
        }
      }
      container remaining {
        container less-than {
          uses compute-capacity;
          uses network-capacity;
          uses storage-capacity;
        }
        container greater-than {
          uses compute-capacity;
          uses network-capacity;
          uses storage-capacity;
        }
      }
      container resources {
        leaf-list some {
          description "Query for Reservation(s) that contain some or more of these element(s)";
          type instance-identifier { ct:instance-type nfvi:ResourceElement; }
        }
        leaf-list every {
          description "Query for Reservation(s) that contain all of these element(s)";
          type instance-identifier { ct:instance-type nfvi:ResourceElement; }
        }
      }
    }
    output {
      ct:instance-list reservations { ct:instance-type ResourceReservation; }
    }
  }
  
  rpc update-reservation {
    description "Update reservation details for an existing reservation";
    input {
      uses reservation-request;
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
        mandatory true;
      }
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
    }
  }
  
  rpc cancel-reservation {
    description "Cancel the reservation and be a good steward";
    input {
      leaf reservation-id {
        type instance-identifier { ct:instance-type ResourceReservation; }
        mandatory true;
      }
    }
    output {
      leaf result {
        type enumeration {
          enum "ok";
          enum "conflict";
          enum "error";
        }
      }
      leaf message { type string; }
    }
  }

  // CAPACITY INTENTS
  rpc query-capacity {
    description "Check available capacity information about a given VIM";
    input {
      leaf provider {
        if-feature multi-provider;
        type instance-identifier { ct:instance-type mano:VirtualInfrastructureManager; }
      }
      leaf zone {
        description "Optional identifier to an Availability Zone";
        type instance-identifier { ct:instance-type nfvi:AvailabilityZone; }
      }
      // additional parameters for query
    }
    output {
      uses resource-capacity {
        augment "capacity/quota" {
          uses compute-capacity;
          uses network-capacity;
        }
        augment "capacity/usage" {
          uses compute-capacity;
          uses network-capacity;
        }
        augment "capacity/reserved" {
          uses compute-capacity;
          uses network-capacity;
        }
        augment "capacity/available" {
          uses compute-capacity;
          uses network-capacity;
        }
      }
    }
  }

  rpc query-future-capacity {
    description "Provides a view of capacity snapshot based on reservations for a future date range";
    input {
      leaf start { type yang:date-and-time; }
      leaf end   { type yang:date-and-time; }
      leaf interval {
        type enumeration {
          enum "daily";
          enum "weekly";
          enum "monthly";
        }
      }
    }
    output {
      list results {
        container reserved {
          uses compute-capacity;
          uses network-capacity;
          uses storage-capacity;
        }
      }
    }
  }

  // TODO...
  notification reservation-event;
  notification capacity-event;
  notification allocation-event;
}
