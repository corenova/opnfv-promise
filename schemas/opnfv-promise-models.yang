submodule opnfv-promise-models {

  belongs-to opnfv-vim { prefix vim; }
  
  import yang-storm { prefix ys; }

  feature resource-reservation;
  
  ys:complex-type ResourceReservation {
    ys:extends vim:ResourceElement;
    
    description
      "Contains the capacities of various resource services being reserved
       along with any resource elements needed to be available at
       the time of allocation(s).

       Optionally, a list of 'planned' allocations can be specified,
       which will be used during handling of the reservation request
       for assessing available capacity and capabilities of the
       underlying infrastructure.  

       If 'allocate-on-start' is set to true, the 'planned'
       allocations will take effect automatically at the reservation
       'start' date/time.";
    
    leaf provider {
      description "Reference to an existing provider from which this reservation will be drawn";
      type instance-identifier {
        ys:instance-type vim:ResourceProvider;
        require-instance true;
      }
      mandatory true;
    }
    leaf start { type ys:date-and-time; }
    leaf end   { type ys:date-and-time; }
    leaf priority {
      description
        "Reflects current priority level of the reservation according to classification rules";
      type number;
      config false;
    }

    leaf scope {
      description "Reference to an existing AccessIdentity model (domain, project, group, user)";
      type instance-identifier { ys:instance-type vim:AccessIdentity; }
    }

    container capacity {
      uses vim:compute-capacity;
      uses vim:networking-capcity;
      uses vim:storage-capacity;
    }

    leaf-list resources {
      description
        "Reference to a collection of existing resource elements required by
         this reservation. It can contain any instance derived from
         ResourceElement, such as ServerInstances or even other
         ResourceReservations. If the ResourceReservation request is
         accepted, the ResourceElement(s) listed here will be placed
         into 'protected' mode as to prevent accidental delete.";
      type instance-identifier {
        ys:instance-type vim:ResourceElement;
      }
      // following 'must' statement applies to each element
      must "boolean(/provider/elements/*[@id=id])" {
        error-message "One or more of the ResourceElement(s) does not exist in the provider to be reserved";
      }
    }

    leaf allocate-on-start { type boolean; default false; }
    
    ys:instance-list allocations {
      description "Contains list of new ResourceElements that will be allocated in the future";
      ys:instance-type vim:ResourceElement;
    }

    container consumed {
      config false;
      description
        "Provides visibility into total consumed capacity for this
         reservation based on allocations that took effect utilizing
         this reservation ID as a reference.";

      uses vim:compute-capacity;
      uses vim:networking-capcity;
      uses vim:storage-capacity;
    }
  }
}

