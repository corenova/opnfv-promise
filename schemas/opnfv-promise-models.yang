module opnfv-promise-models {
  prefix opm;

  import yang-storm { prefix ys; }
  
  import opnfv-vim { prefix vim; ys:source 'opnfv-vim.yang'; }
    
  ys:complex-type ResourcePool {
    leaf-list providers {
      description "Reference to list of one-or-more existing ResourceProvider belonging to this ResourcePool";
      type instance-identifier {
        ys:instance-type vim:ResourceProvider;
      }
      mandatory true;
    }
    leaf-list services {
      description "Aggregate list of all services available from /providers";
      type instance-identifier {
        ys:instance-type vim:ProviderService;
      }
      config false;
    }
    leaf-list elements {
      description "Aggregate list of all elements available from /providers";
      type instance-identifier {
        ys:instance-type vim:ResourceElement;
      }
      config false;
      //Array::concat.apply null, (provider.get('elements') for provider in @get('providers'))
    }
  }

  ys:complex-type ResourceReservation {
    description
      "Contains the capacities of various resource services being reserved
       along with any resource elements needed to be available at
       the time of allocation(s).

       Optionally, a list of 'planned' allocations can be specified,
       which will be used during handling of the reservation request
       for assessing available capacity and capabilities of the
       underlying infrastructure.  

       If 'allocate-on-start' is set to true, the 'planned'
       allocations will take effect automatically at the reservation
       'start' date/time.";
    
    leaf pool {
      description "Reference to an existing pool from which this reservation will be drawn";
      type instance-identifier {
        ys:instance-type ResourcePool;
        require-instance true;
      }
      mandatory true;
    }
    leaf start { type ys:date-and-time; }
    leaf end   { type ys:date-and-time; }
    leaf priority {
      description
        "Reflects current priority level of the reservation according to classification rules";
      type number;
      config false;
    }

    ys:instance-list capacity {
      ys:instance-type vim:ServiceCapacity;
      min-elements 1;
    }

    leaf-list elements {
      description "Reference to collection of existing resource elements required by this reservation";
      type instance-identifier {
        ys:instance-type vim:ResourceElement;
      }
      // following 'must' statement applies to each element
      must "boolean(/pool/elements/*[@id=id])" {
        error-message "One or more of the ResourceElement(s) does not exist in the pool to be reserved";
      }
    }

    leaf allocate-on-start { type boolean; default false; }

    container allocation {
      ys:instance-list planned {
        ys:instance-type AllocationDescription;
      }
      leaf-list fulfilled {
        type instance-identifier {
          ys:instance-type ResourceAllocation;
        }
        config false;
      }
    }
    
    container consumed {
      config false;
      description
        "Provides visibility into total consumed capacity for this
         reservation based on allocations that took effect utilizing
         this reservation ID as a reference.";
      
      container capacity {
        container compute { uses ComputeCapacity; }
        container storage { uses StorageCapacity; }
        container network { uses NetworkCapacity; }
      }
      ys:instance-list allocations {
        ys:instance-type ResourceAllocation;
      } 
    }
  }

  // below Allocation related models are WIP...
  
  ys:complex-type AllocationDescription {
    leaf name { type string; }

    ys:instance provider { ys:instance-type vim:ResourceProvider; }
    ys:instance flavor { ys:instance-type vim:ResourceElement; }
    ys:instance image { ys:instance-type vim:ResourceElement; }
    //(@get 'provider.elements').contains id: value

    ys:instance-list networks {
      ys:instance-type vim:ResourceElement;
    }
  }

  ys:complex-type ResourceAllocation {
    leaf reservation {
      type instance-identifier {
        ys:instance-type ResourceReservation;  
      }
    }
  }
}

