module opnvf-vim {
  prefix vim;

  import yang-storm { prefix ys; }

  /*********************************************
   * Abstract Models (must be subclassed)
   *********************************************/

  ys:complex-type ResourceElement {
    ys:abstract true;
    leaf name { type string; }
  }

  ys:complex-type ResourceDomain {
    ys:abstract true;
    description
      "ResourceDomain represent a distinct administrative domain across
       collection of users, groups, and projects.";
    
    leaf name { type string; mandatory true; }
    leaf description { type string; }
    leaf enabled { type boolean; default false; }

    leaf-list users { type instance-identifier { ys:instance-type DomainUser; } }
    leaf-list groups { type instance-identifer { ys:instance-type DomainGroup; } }
    leaf-list projects { type instance-identifier { ys:instance-type DomainProject; } }
  }

  ys:complex-type DomainProject {
    ys:abstract true;
    description
      "DomainProject represent a distinct resource consumption space across
       collection of users and groups that can reserve and allocate
       resources.";
    
    leaf domain {
      type instance-identifier { ys:instance-type ResourceDomain; }
      mandatory true;
    }
    leaf enabled { type boolean; default false; }
    leaf name { type string; mandatory true; }

    leaf-list users { type instance-identifier { ys:instance-type DomainUser; } }
    leaf-list groups { type instance-identifer { ys:instance-type DomainGroup; } }
  }
  
  ys:complex-type ResourceProvider {
    ys:abstract true;
    
    leaf name { type string; mandatory true; }

    ys:instance-list domains { ys:instance-type ResourceDomain; }
    ys:instance-list projects { ys:instance-type DomainProject; }
    ys:instance-list users { ys:instance-type DomainUser; }
    ys:instance-list groups { ys:instance-type DomainGroup; }
    ys:instance-list credentials { ys:instance-type AccessCredential; }
    ys:instance-list roles { ys:instance-type AccessRole; }
    ys:instance-list policies { ys:instance-type AccessPolicy; }

    ys:instance-list services { ys:instance-type ProviderService; }
    ys:instance-list endpoints { ys:instance-type ServiceEndpoint; }

    container auth {
      description 'Conceptual container that will be extended by explicit provider';
    }

    container network {
      description 'Conceptual container that will be extended by explicit provider';
    }
    
    ys:instance-list flavors { ys:instance-type ResourceElement; }

    leaf-list elements {
      type instance-identifier {
        ys:instance-type ResourceElement;
      }
      config false;
      must "/services/*/elements";
    }
  }
  
  ys:complex-type ProviderService {
    ys:abstract true;
    
    ys:instance provider { ys:instance-type ResourceProvider; }
    leaf endpoint { type uri; }
    container capacity {
      leaf quota { description 'Conceptual leaf that should be extended'; config false; }
      leaf usage { description 'Conceptual leaf that should be extended'; config false; }
      leaf reserved { description 'Conceptual leaf that should be extended'; config false; }
      leaf available { description 'Conceptual leaf that should be extended'; config false; }
    }
    ys:instance-list elements { ys:instance-type ResourceElement; }
  }

  ys:complex-type ServiceCapacity {
    ys:abstract true;
    leaf timestamp { type ys:date-and-time; }
  }

  /*********************************************
   * Compute Models
   *********************************************/

  ys:complex-type ComputeCapacity {
    ys:extends ServiceCapacity;
    
    leaf cores { type number; default 0; }
    leaf ram { type number; default 0; }
    leaf instances { type number; default 0; }
  }

  ys:complex-type ComputeInstance {
    leaf created-on { type ys:data-and-time; }
    leaf ip-address { type ys:ip-address; }
  }
  
  ys:complex-type ComputeService {
    ys:extends ProviderService;
    
    refine "/capacity/quota" { type instance-identifier { ys:instance-type ComputeCapacity; } }
    refine "/capacity/usage" { uses ComputeCapacity; }
    refine "/capacity/reserved" { uses ComputeCapacity; }
    refine "/capacity/available" {
      uses ComputeCapacity;
      //available = quota - usage - reserved
    }
      
    ys:instance-list instances {
      ys:instance-type ComputeInstance;
      // get a list of servers (@invoke 'list-serves')
    }
  }
}
