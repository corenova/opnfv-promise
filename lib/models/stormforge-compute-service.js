// Generated by CoffeeScript 1.8.0
(function() {
  var ComputeCapacity, ComputeService, DS, Hypervisor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DS = require('../stormforge');

  ComputeCapacity = (function(_super) {
    __extends(ComputeCapacity, _super);

    function ComputeCapacity() {
      return ComputeCapacity.__super__.constructor.apply(this, arguments);
    }

    ComputeCapacity.prototype.alias = 'computeCapacity';

    ComputeCapacity.prototype.cores = ComputeCapacity.attr('number');

    ComputeCapacity.prototype.ram = ComputeCapacity.attr('number');

    ComputeCapacity.prototype.instances = ComputeCapacity.attr('number');

    return ComputeCapacity;

  })(DS.Provider.Service.Capacity);

  Hypervisor = (function(_super) {
    __extends(Hypervisor, _super);

    function Hypervisor() {
      return Hypervisor.__super__.constructor.apply(this, arguments);
    }

    Hypervisor.prototype.alias = 'hypervisor';

    Hypervisor.prototype.cpu = Hypervisor.attr('string');

    Hypervisor.prototype.workload = Hypervisor.attr('number');

    Hypervisor.prototype.hostname = Hypervisor.attr('string');

    Hypervisor.prototype.type = Hypervisor.attr('string');

    Hypervisor.prototype.ram = Hypervisor.attr('number', {
      unit: 'GB'
    });

    Hypervisor.prototype.ramUsed = Hypervisor.attr('number', {
      unit: 'GB'
    });

    Hypervisor.prototype.ramFree = Hypervisor.attr('number', {
      unit: 'MB'
    });

    Hypervisor.prototype.disk = Hypervisor.attr('number', {
      unit: 'GB'
    });

    Hypervisor.prototype.diskUsed = Hypervisor.attr('number', {
      unit: 'GB'
    });

    Hypervisor.prototype.diskFree = Hypervisor.attr('number', {
      unit: 'GB'
    });

    Hypervisor.prototype.instances = Hypervisor.attr('number');

    Hypervisor.prototype.vcpus = Hypervisor.attr('number');

    Hypervisor.prototype.vcpusUsed = Hypervisor.attr('number');

    return Hypervisor;

  })(DS.Model);

  ComputeService = (function(_super) {
    __extends(ComputeService, _super);

    function ComputeService() {
      return ComputeService.__super__.constructor.apply(this, arguments);
    }

    ComputeService.prototype.alias = 'computeService';

    ComputeService.aggregate = function(computes) {
      return console.log('hello');
    };

    ComputeService.Capacity = ComputeCapacity;

    ComputeService.Hypervisor = Hypervisor;

    ComputeService.prototype.quota = ComputeService.belongsTo(ComputeService.Capacity, {
      embedded: true
    });

    ComputeService.prototype.usage = ComputeService.belongsTo(ComputeService.Capacity, {
      embedded: true,
      readonly: true
    });

    ComputeService.prototype.reserved = ComputeService.belongsTo(ComputeService.Capacity, {
      embedded: true,
      readonly: true
    });

    ComputeService.prototype.available = ComputeService.computed((function() {}));

    ComputeService.prototype.hypervisors = ComputeService.hasMany(ComputeService.Hypervisor, {
      readonly: true
    });

    ComputeService.prototype.instances = ComputeService.hasMany(DS.Asset);

    return ComputeService;

  })(DS.Provider.Service);

  module.exports = ComputeService;

}).call(this);
