// Generated by CoffeeScript 1.8.0
(function() {
  var DS, ResourcePool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DS = require('../stormforge');

  ResourcePool = (function(_super) {
    __extends(ResourcePool, _super);

    function ResourcePool() {
      return ResourcePool.__super__.constructor.apply(this, arguments);
    }

    ResourcePool.prototype.providers = ResourcePool.hasMany(DS.Provider, {
      required: true
    });

    ResourcePool.prototype.compute = ResourcePool.computed((function() {
      var provider;
      return DS.Provider.ComputeService.aggregate((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('providers');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          provider = _ref[_i];
          _results.push(provider.get('compute'));
        }
        return _results;
      }).call(this));
    }));

    ResourcePool.prototype.storage = ResourcePool.computed((function() {
      var provider;
      return DS.Provider.StorageService.aggregate((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('providers');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          provider = _ref[_i];
          _results.push(provider.get('storage'));
        }
        return _results;
      }).call(this));
    }));

    ResourcePool.prototype.netwok = ResourcePool.computed((function() {
      var provider;
      return DS.Provider.NetworkService.aggregate((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('providers');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          provider = _ref[_i];
          _results.push(provider.get('network'));
        }
        return _results;
      }).call(this));
    }));

    ResourcePool.prototype.elements = ResourcePool.computed((function() {
      var provider;
      return Array.prototype.concat.apply((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('providers');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          provider = _ref[_i];
          _results.push(provider.get('elements'));
        }
        return _results;
      }).call(this));
    }));

    return ResourcePool;

  })(DS.Model);

  module.exports = ResourcePool;

}).call(this);
