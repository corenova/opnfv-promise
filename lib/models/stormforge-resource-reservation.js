// Generated by CoffeeScript 1.8.0
(function() {
  var DS, ResourceReservation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DS = require('../stormforge');

  ResourceReservation = (function(_super) {
    __extends(ResourceReservation, _super);

    function ResourceReservation() {
      return ResourceReservation.__super__.constructor.apply(this, arguments);
    }

    ResourceReservation.prototype.pool = ResourceReservation.belongsTo(DS.Pool);

    ResourceReservation.prototype.start = ResourceReservation.attr('date', {
      required: true
    });

    ResourceReservation.prototype.end = ResourceReservation.attr('date', {
      required: true
    });

    ResourceReservation.prototype.isActive = ResourceReservation.attr('boolean', {
      defaultValue: false
    });

    ResourceReservation.prototype.elements = ResourceReservation.hasMany(DS.Provider.Service.Element);

    ResourceReservation.prototype.compute = ResourceReservation.belongsTo(DS.Provider.ComputeService.Capacity, {
      embedded: true
    });

    ResourceReservation.prototype.storage = ResourceReservation.belongsTo(DS.Provider.StorageService.Capacity, {
      embedded: true
    });

    ResourceReservation.prototype.network = ResourceReservation.belongsTo(DS.Provider.NetworkService.Capacity, {
      embedded: true
    });

    ResourceReservation.prototype.allocations = ResourceReservation.hasMany(DS.Allocation, {
      readonly: true
    });

    ResourceReservation.prototype.usedCompute = ResourceReservation.belongsTo(DS.Provider.ComputeService.Capacity, {
      embedded: true,
      readonly: true
    });

    ResourceReservation.prototype.usedStorage = ResourceReservation.belongsTo(DS.Provider.StorageService.Capacity, {
      embedded: true,
      readonly: true
    });

    ResourceReservation.prototype.usedNetwork = ResourceReservation.belongsTo(DS.Provider.NetworkService.Capacity, {
      embedded: true,
      readonly: true
    });

    return ResourceReservation;

  })(DS.Model);

  module.exports = ResourceReservation;

}).call(this);
