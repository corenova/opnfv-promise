// Generated by CoffeeScript 1.8.0
(function() {
  var DS, ProviderService, ResourceElement, ResourceProvider, ServiceCapacity,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DS = require('../stormforge');

  ResourceElement = (function(_super) {
    __extends(ResourceElement, _super);

    function ResourceElement() {
      return ResourceElement.__super__.constructor.apply(this, arguments);
    }

    ResourceElement.prototype.type = DS.attr('string', {
      required: true
    });

    ResourceElement.prototype.provider = ResourceElement.belongsTo(DS.Provider, {
      required: true
    });

    return ResourceElement;

  })(DS.Model);

  ServiceCapacity = (function(_super) {
    __extends(ServiceCapacity, _super);

    function ServiceCapacity() {
      return ServiceCapacity.__super__.constructor.apply(this, arguments);
    }

    ServiceCapacity.prototype.alias = 'serviceCapacity';

    return ServiceCapacity;

  })(DS.Model);

  ProviderService = (function(_super) {
    __extends(ProviderService, _super);

    function ProviderService() {
      return ProviderService.__super__.constructor.apply(this, arguments);
    }

    ProviderService.prototype.alias = 'providerService';

    ProviderService.Capacity = ServiceCapacity;

    ProviderService.Element = ResourceElement;

    ProviderService.prototype.provider = ProviderService.belongsTo(DS.Provider, {
      required: true
    });

    ProviderService.prototype.endpoint = ProviderService.attr('string', {
      required: true
    });

    ProviderService.prototype.quota = ProviderService.belongsTo(ProviderService.Capacity, {
      embedded: true
    });

    ProviderService.prototype.usage = ProviderService.belongsTo(ProviderService.Capacity, {
      embedded: true,
      readonly: true
    });

    ProviderService.prototype.reserved = ProviderService.belongsTo(ProviderService.Capacity, {
      embedded: true,
      readonly: true
    });

    ProviderService.prototype.available = ProviderService.belongsTo(ProviderService.Capacity, {
      embedded: true,
      readonly: true
    });

    ProviderService.prototype.elements = ProviderService.hasMany(ProviderService.Element);

    return ProviderService;

  })(DS.Model);

  ResourceProvider = (function(_super) {
    __extends(ResourceProvider, _super);

    function ResourceProvider() {
      return ResourceProvider.__super__.constructor.apply(this, arguments);
    }

    ResourceProvider.Service = ProviderService;

    ResourceProvider.ComputeService = require('./stormforge-compute-service');

    ResourceProvider.ImageService = require('./stormforge-image-service');

    ResourceProvider.IdentityService = require('./stormforge-identity-service');

    ResourceProvider.prototype.name = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.username = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.password = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.endpoint = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.tenant = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.regionName = DS.attr('string', {
      required: true
    });

    ResourceProvider.prototype.identity = ResourceProvider.belongsTo(ResourceProvider.IdentityService, {
      required: true
    });

    ResourceProvider.prototype.image = ResourceProvider.belongsTo(ResourceProvider.ImageService, {
      required: true
    });

    ResourceProvider.prototype.compute = ResourceProvider.belongsTo(ResourceProvider.ComputeService, {
      required: true
    });

    ResourceProvider.prototype.flavors = ResourceProvider.hasMany(ResourceProvider.ResourceFlavor);

    ResourceProvider.prototype.elements = ResourceProvider.computed((function() {
      var service;
      return Array.prototype.concat.apply((function() {
        var _i, _len, _ref, _results;
        _ref = ['identity', 'image', 'compute'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          service = _ref[_i];
          _results.push(this.get(service).get('elements'));
        }
        return _results;
      }).call(this));
    }));

    return ResourceProvider;

  })(DS.Model);

  module.exports = ResourceProvider;

}).call(this);
