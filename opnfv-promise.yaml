name: opnfv-promise
description: Resource Management for Virtualized Infrastructure
author: Peter K. Lee <peter@intercloud.net>
license: Apache-2.0
homepage: http://wiki.opnfv.org/promise
repository: git://github.com/opnfv/promise.git
keywords:
  - opnfv
  - promise
  - vim
  - nfvi
  - infrastructure
  - openstack
  - nbi
  - yangforge
  - resource
  - reservation
  - capacity
  - allocation

schema: !yang/schema opnfv-promise.yang

# below config provides default parameters
config: !json opnfv-promise.json

dependencies:
  nfv-infrastructure: !yang/schema nfv-infrastructure.yang
  nfv-mano:           !yang/schema nfv-mano.yang

module:
  opnfv-promise:
    # rebind to be a computed property
    promise.capacity.reserved: !coffee/function |
      (prev) -> @computed (->
        combine = (a, b) ->
          for k, v of b.capacity when v?
            a[k] ?= 0
            a[k] += v
          return a
        (@parent.get 'reservations').reduce combine, {}
      ), type: prev
    # rebind to be a computed property
    promise.capacity.available: !coffee/function |
      (prev) -> @computed (-> 
        quota = @get 'quota'
        reserved = @get 'reserved'
        usage = @get 'usage'
        for k, v of quota when v?
          quota[k] -= reserved[k] if reserved[k]?
          quota[k] -= usage[k] if usage[k]?
        quota
      ), type: prev

complex-type:
  ResourceReservation:
    validate: !coffee/function |
      (prev) -> (value=@get(), resolve, reject) ->
        # validate that request contains sufficient data
        for k, v of value.capacity when v? and !!v
          hasCapacity = true
        if (not hasCapacity) and value.resources.length is 0
          return reject "unable to validate reservation record without anything being reserved"
        # time range verifications
        now = new Date()
        start = (new Date value.start) if value.start?
        end   = (new Date value.end) if value.end?
        if start? and start < now
          return reject "requested start time #{value.start} cannot be in the past"
        if end? and end < now
          return reject "requested end time #{value.end} cannot be in the past"
        if start? and end? and start > end
          retun reject "requested start time must be earlier than end time"
        resolve this
    save: !coffee/function |
      (prev) -> (resolve, reject) ->
        @invoke 'validate', @get()
        .then (res) ->
          # should do something about this reservation record...
          now = (new Date()).toJSON()
          unless (res.get 'created-on')?
            res.set 'created-on', now 
          res.set 'modified-on', now
          resolve res
        .catch (e) -> reject e

#RPC definitions
rpc:
  create-reservation: !coffee/function |
    (input, output, done) ->
      # first verify that requested capacity is available
      requested = input.get 'capacity'
      available = @get 'promise.capacity.available'
      for k, v of requested when v?
        unless v <= available[k]
          output.set 'result', 'conflict'
          output.set 'message', "requested #{k}=#{v} exceeds available #{available[k]}"
          return done()

      # then verify that the requested resource identifiers are available
      # TODO...

      # create the reservation record and try to save it
      reservation = @create 'ResourceReservation', input.get()
      reservation.save()
      .then =>
        # TODO currently an issue with instance-list making a new instance due to instanceof check issue
        (@access 'promise.reservations').push reservation
        output.set 'result', 'ok'
        output.set 'message', 'request accepted'
        output.set 'reservation-id', reservation.id
        done()
      .catch (e) ->
        output.set 'result', 'error'
        output.set 'message', e
        done()

  update-reservation: !coffee/function |
    (input, output, done) ->
      reservation = @find 'ResourceReservation', input.get 'reservation-id'
      requested = input.get 'capacity'
      reserved  = reservation.get 'capacity'
      available = @get 'promise.capacity.available'
      for k, v of requested when v?
        unless requested[k] <= (available[k] + reserved[k])
          output.set 'result', 'conflict'
          output.set 'message', "requested #{k}=#{v} exceeds #{available[k] + reserved[k]}"
          return done()

      reservation.invoke 'validate', input.get()
      .then (res) ->
        res.set input.get()
        res.save()
        .then ->
          output.set 'result', 'ok'
          output.set 'message', 'update accepted'
          done()
        .catch (e) ->
          output.set 'result', 'error'
          output.set 'message', e
          done()

  cancel-reservation: !coffee/function |
    (input, output, done) ->
      reservation = @find 'ResourceReservation', input.get 'reservation-id'
      reservation.destroy()
      .then =>
        (@access 'promise.reservations').remove reservation.id
        output.set 'result', 'ok'
        output.set 'message', 'reservation canceled'
        done()
      .catch (e) ->
        output.set 'result', 'error'
        output.set 'message', e
        done()

  # TEMPORARY
  add-provider: !coffee/function |
    (input, output, done) ->
      @using 'mano', ->
        @invoke 'add-provider', (input.get 'endpoint', 'region', 'username', 'password')
        .then (res) =>
          (@access 'promise.providers').push res
          output.set 'result', 'ok'
          output.set 'provider-id', res.id
          done()
