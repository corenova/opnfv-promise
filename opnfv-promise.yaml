name: opnfv-promise
description: Resource Management for Virtualized Infrastructure
author: Peter K. Lee <peter@intercloud.net>
license: Apache-2.0
homepage: http://wiki.opnfv.org/promise
repository: git://github.com/opnfv/promise.git
keywords:
  - opnfv
  - promise
  - vim
  - nfvi
  - infrastructure
  - openstack
  - nbi
  - yangforge
  - resource
  - reservation
  - capacity
  - allocation

schema: !yang opnfv-promise.yang

# below config provides default parameters
config: !json opnfv-promise.json

dependencies:
  nfv-infrastructure: !yang nfv-infrastructure.yang
  nfv-mano:           !yang nfv-mano.yang

# MODULE model active bindings
module:
  opnfv-promise:
    # rebind to be a computed property
    promise.capacity.total: !coffee/function |
      (prev) -> @computed (->
        combine = (a, b) ->
          for k, v of b.capacity when v?
            a[k] ?= 0
            a[k] += v
          return a
        (@parent.get 'pools')
        .filter (entry) -> entry.active is true
        .reduce combine, {}
      ), type: prev
    # rebind to be a computed property
    promise.capacity.reserved: !coffee/function |
      (prev) -> @computed (->
        combine = (a, b) ->
          for k, v of b.capacity when v?
            a[k] ?= 0
            a[k] += v
          return a
        (@parent.get 'reservations')
        .filter (entry) -> entry.active is true
        .reduce combine, {}
      ), type: prev
    # rebind to be a computed property
    promise.capacity.available: !coffee/function |
      (prev) -> @computed (-> 
        total = @get 'total'
        reserved = @get 'reserved'
        usage = @get 'usage'
        for k, v of total when v?
          total[k] -= reserved[k] if reserved[k]?
          total[k] -= usage[k] if usage[k]?
        total
      ), type: prev

# COMPLEX-TYPE model active bindings (controller logic)
complex-type:
  ResourceElement:
    #properties
    id: !coffee/function |
      (prev) -> prev.set 'default', -> @uuid()

  ResourcePool:
    # properties
    start: !coffee/function |
      (prev) -> prev.set 'default', -> (new Date).toJSON()

    active: !coffee/function |
      (prev) -> @computed (->
        now = new Date
        start = new Date (@get 'start')
        end = switch
          when (@get 'end')? then new Date (@get 'end')
          else now
        (@get 'enabled') and (start <= now <= end)
      ), type: prev

  ResourceReservation:
    # private properties (NOT in YANG schema)
    max-duration: !coffee/function |
      () -> @computed (->
        # hackish... yes
        (@seek name: 'opnfv-promise').get 'promise.policy.reservation.max-duration'
      ), type: 'number', private: true

    # properties
    start: !coffee/function |
      (prev) -> prev.set 'default', -> (new Date).toJSON()

    end: !coffee/function |
      (prev) -> prev.set 'default', ->
        end = (new Date @get 'start')
        max = @get 'max-duration'
        end.setTime (end.getTime() + (max*60*60*1000))
        end.toJSON()

    active: !coffee/function |
      (prev) -> @computed (->
        now = new Date
        start = new Date (@get 'start')
        end   = new Date (@get 'end')
        (@get 'enabled') and (start <= now <= end)
      ), type: prev

    remaining: !coffee/function |
      (prev) -> @computed (->
        total = @get 'capacity'
        records = @access 'allocations.*'
        for entry in records
          usage = entry.get 'capacity'
          for k, v of usage
            total[k] -= v
        total
      ), type: prev

    # methods
    validate: !coffee/function |
      (prev) -> (value={}, resolve, reject) ->
        # validate that request contains sufficient data
        for k, v of value.capacity when v? and !!v
          hasCapacity = true
        if (not hasCapacity) and value.resources.length is 0
          return reject "unable to validate reservation record without anything being reserved"
        # time range verifications
        now = new Date
        start = (new Date value.start) if value.start?
        end   = (new Date value.end) if value.end?
        # if start? and start < now
        #   return reject "requested start time #{value.start} cannot be in the past"
        if end? and end < now
          return reject "requested end time #{value.end} cannot be in the past"
        if start? and end? and start > end
          retun reject "requested start time must be earlier than end time"
        resolve this

    update: !coffee/function |
      (prev) -> (req, resolve, reject) ->
        req.start ?= @get 'start'
        req.end   ?= @get 'end'

        # TODO: should validate here...
        @parent.invoke 'query-capacity',
          start: req.start
          end: req.end
          capacity: 'available'
          without: @id
        .then (res) =>
          collections = res.get 'collections'
          unless collections.length > 0
            return reject 'no resource capacity available during requested start/end time'

          pools = collections.filter (e) -> /^ResourcePool/.test e
          # should do some policy or check to see if more than one pool acceptable to reservee

          entries = res.get 'utilization'
          start = new Date req.start
          end   = new Date req.end
          for x in [0..entries.length-1]
            t1 = new Date entries[x].timestamp
            break unless t1 < end

            if x < entries.length-1
              t2 = new Date entries[x+1].timestamp
              continue unless t2 > start

            available = entries[x].capacity
            for k, v of req.capacity when v? and !!v
              unless available[k] >= v
                return reject "requested #{k}=#{v} exceeds available #{available[k]} between #{t1} and #{t2}"

          @set req
          @set 'pools', pools
          resolve this
        .catch (err) -> reject err

    save: !coffee/function |
      (prev) -> (resolve, reject) ->
        @invoke 'validate', @get()
        .then (res) ->
          # should do something about this reservation record...
          now = (new Date).toJSON()
          unless (res.get 'created-on')?
            res.set 'created-on', now 
          res.set 'modified-on', now
          resolve res
        .catch (e) -> reject e

# RPC definitions (INTENT interfaces)
rpc:
  create-reservation: !coffee/function |
    (input, output, done) ->
      # 1. create the reservation record (empty)
      reservation = @create 'ResourceReservation'
      reservations = @access 'promise.reservations'

      # 2. update the record with requested input
      reservation.invoke 'update', input.get()
      .then (res) ->
        # 3. save the record and add to list
        res.save()
        .then ->
          reservations.push res
          output.set result: 'ok', message: 'reservation request accepted'
          output.set 'reservation-id', res.id
          done()
        .catch (err) ->
          output.set result: 'error', message: err
          done()
      .catch (err) -> 
        output.set result: 'conflict', message: err
        done()

  query-reservation: !coffee/function |
    (input, output, done) ->
      query = input.get()
      query.capacity = 'reserved'
      @invoke 'query-capacity', query
      .then (res) ->
        output.set 'reservations', res.get 'collections'
        output.set 'utilization', res.get 'utilization'
        done()
      .catch (e) -> done e

  update-reservation: !coffee/function |
    (input, output, done) ->
      # TODO: we shouldn't need this... need to check why leaf mandatory: true not being enforced
      unless (input.get 'reservation-id')?
        output.set result: 'error', message: "must provide 'reservation-id' parameter"
        return done()

      # 1. find the reservation
      reservation = @find 'ResourceReservation', input.get 'reservation-id'
      unless reservation?
        output.set result: 'error', message: 'no reservation found for specified identifier'
        return done()

      # 2. update the record with requested input
      reservation.invoke 'update', input.get()
      .then (res) ->
        # 3. save the updated record
        res.save()
        .then ->
          output.set result: 'ok', message: 'reservation update successful'
          done()
        .catch (err) ->
          output.set result: 'error', message: err
          done()
      .catch (err) ->
        output.set result: 'conflict', message: err
        done()

  cancel-reservation: !coffee/function |
    (input, output, done) ->
      # 1. find the reservation
      reservation = @find 'ResourceReservation', input.get 'reservation-id'
      unless reservation?
        output.set result: 'error', message: 'no reservation found for specified identifier'
        return done()

      # 2. destroy all traces of this reservation
      reservation.destroy()
      .then =>
        (@access 'promise.reservations').remove reservation.id
        output.set 'result', 'ok'
        output.set 'message', 'reservation canceled'
        done()
      .catch (e) ->
        output.set 'result', 'error'
        output.set 'message', e
        done()

  query-capacity: !coffee/function |
    (input, output, done) ->
      # 1. we gather up all collections that match the specified window
      window = input.get 'window'
      metric = input.get 'capacity'

      collections = switch metric
        when 'total'     then [ 'ResourcePool' ]
        when 'reserved'  then [ 'ResourceReservation' ]
        when 'usage'     then [ 'ResourceAllocation' ]
        when 'available' then [ 'ResourcePool', 'ResourceReservation', 'ResourceAllocation' ]

      matches = collections.reduce ((a, name) =>
        res = @find name,
          start: (value) -> (not window.end?)   or (new Date value) <= (new Date window.end)
          end:   (value) -> (not window.start?) or (new Date value) >= (new Date window.start)
          enabled: true
        a.concat res...
      ), []

      if window.scope is 'exclusive'
        # yes, we CAN query filter in one shot above but this makes logic cleaner...
        matches = matches.where
          start: (value) -> (not window.start?) or (new Date value) >= (new Date window.start)
          end:   (value) -> (not window.end?) or (new Date value) <= (new Date window.end)

      # exclude any identifiers specified
      matches = matches.without id: (input.get 'without')

      if metric is 'available'
        # excludes allocations with reservation property set (to prevent double count)
        matches = matches.without reservation: (v) -> v?

      output.set 'collections', matches
      unless (input.get 'show-utilization') is true
        return done()

      # 2. we calculate the deltas based on start/end times of each match item
      deltas = matches.reduce ((a, entry) ->
        b = entry.get()
        b.end ?= 'infiniteT'
        [ skey, ekey ] = [ (b.start.split 'T')[0], (b.end.split 'T')[0] ]
        a[skey] ?= count: 0, capacity: {}
        a[ekey] ?= count: 0, capacity: {}
        a[skey].count += 1
        a[ekey].count -= 1

        for k, v of b.capacity when v?
          a[skey].capacity[k] ?= 0
          a[ekey].capacity[k] ?= 0
          if entry.name is 'ResourcePool'
            a[skey].capacity[k] += v
            a[ekey].capacity[k] -= v
          else
            a[skey].capacity[k] -= v
            a[ekey].capacity[k] += v
        return a
      ), {}

      # 3. we then sort the timestamps and aggregate the deltas
      last = count: 0, capacity: {}
      usages = for timestamp in Object.keys(deltas).sort() when timestamp isnt 'infinite'
        entry = deltas[timestamp]
        entry.timestamp = (new Date timestamp).toJSON()
        entry.count += last.count
        for k, v of entry.capacity
          entry.capacity[k] += (last.capacity[k] ? 0)
        last = entry
        entry

      output.set 'utilization', usages
      done()

  increase-capacity: !coffee/function |
    (input, output, done) ->
      pool = @create 'ResourcePool', input.get()
      pool.save()
      .then (res) =>
        (@access 'promise.pools').push res
        output.set result: 'ok', message: 'capacity increase successful'
        output.set 'pool-id', res.id
        done()
      .catch (e) ->
        output.set result: 'error', message: e
        done()

  decrease-capacity: !coffee/function |
    (input, output, done) ->
      request = input.get()
      for k, v of request.capacity
        request.capacity[k] = -v
      pool = @create 'ResourcePool', request
      pool.save()
      .then (res) =>
        (@access 'promise.pools').push res
        output.set result: 'ok', message: 'capacity decrease successful'
        output.set 'pool-id', res.id
        done()
      .catch (e) ->
        output.set result: 'error', message: e
        done()

  # TEMPORARY
  add-provider: !coffee/function |
    (input, output, done) ->
      @using 'mano', ->
        @invoke 'add-provider', (input.get 'endpoint', 'region', 'username', 'password')
        .then (res) =>
          (@access 'promise.providers').push res
          output.set 'result', 'ok'
          output.set 'provider-id', res.id
          done()
